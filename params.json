{"google":"UA-345937-20","tagline":"Dump Twitter API statuses/filter streams using Python and Tweepy","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Twitter Streamer","body":"*[Twitter Streamer][twitter-streamer]* is a Python command-line utility to dump [Twitter streaming API][streaming-apis] \r\n[statuses/filter][statuses-filter] method data to stdout.\r\n\r\nIt began life as a testing tool for [Tweepy][tweepy], and to satisfy my curiosity.\r\nIt's currently in an early beta test state, needs testing and improvement. \r\n(see [Known issues](#known-issues), below)\r\n\r\n## Usage ##\r\nBasic usage:\r\n\r\n    python streamer.py [options] \"track terms\" ...\r\n    \r\nYou can print a usage summary by invoking `streamer.py` with the `-h` or `--help` option.\r\n\r\n## Examples ##\r\nStream (filter) statuses containing both *car* **and** *dog*:\r\n\r\n    python streamer.py \"car dog\"\r\n\r\nStream statuses containing either *boat* **or** *bike*:\r\n\r\n    python streamer.py \"boat,bike\" \r\n    \r\nStream statuses containing (*water* **and** *drink*) *or* (*eat* **and** *lunch*):\r\n\r\n    python streamer.py \"water drink\" \"eat lunch\"\r\n\r\n## Experimental Features ##\r\n### Location-based searching ###\r\nAs of v0.0.4, you can add location-based search criteria by specifying the `--locations`\r\noption.  The value is a comma-separated list of longitude, latitude pairs that\r\ndefine one or more bounding boxes to include in the stream.  (This implies that\r\nthe number of comma-separated `--location=` values must be a multiple of 4, and\r\nin fact Tweepy enforces this for us.)  \r\n\r\nExample:\r\n\r\n    $ python streamer.py --f=place.full_name,coordinates.coordinates,text --locations=\"-122.75,36.8,-121.75,37.8\"\r\n\r\nThis produces a stream of status updates as CSV, with the `place.full_name`,\r\n`coordinates.coordinates`, and `text` fields (if available).  Here is \r\nan example with longitude and latitude obscured in order to protect privacy:\r\n\r\n    \"San Jose, CA\",\"[longitude, latitude]\",@user is a boy\r\n    \"Oakland, CA\",\"[longitude, latitude]\",@user1 @user2 @user3 @user4 @user5 We are all 1 big happy family #BELIEBERS that what we are 24/7 were #STRONG\r\n    \"California, US\",,i'll be here awhile #311\r\n\r\nwhere `longitude` and `latitude` are floating-point numbers representing Twitter's\r\nnotion of the Tweet's location.\r\n \r\nThere are several fields that are used to determine location: [`coordinates`][twitter-coordinates],\r\n[`place`][twitter-place], and `geo` (the latter is deprecated.)  Note that\r\nTwitter prioritizes the location data by preferring `coordinates` over `place` when \r\ndetermining if a tweet should be included based on geo location.\r\n\r\nNote that including `--locations` \r\nparameter will not further filter other search terms (such as `track` keywords)\r\n-- per the [location][parameters-location] reference, it acts as an OR when \r\ncombined with `track` keywords.\r\n\r\nSee the Twitter's [Tweets][twitter-tweets] structure reference for more information \r\nabout location-based information, and the [location][parameters-location] for more\r\nabout the `location` parameter.\r\n\r\n#### Location Query ####\r\nRecent development versions (0.0.5-dev and higher) support a new option:\r\n`--location-query`.  It allows you to reference a Twitter Place name, and \r\nautomatically use the resulting coordinates as the value of the `--location` \r\nparameter.  (Currently the resulting `--location-query` bounding box overrides \r\nany values passed in the `--location` command line option)\r\n\r\nThe `--location-query` value is passed to the Tweepy `API.geo_search` method \r\n(which uses the Twitter `[geo/search][twitter-go-search]`) as the `query` parameter.\r\n \r\nThe value is case-insensitive, and the value must match an existing Twitter Place\r\n`full_name` field.  In general, you can use this pattern:\r\n\r\n     --location-query=\"{city-name}, {state-abbrev}\"\r\n     --location-query=\"{state-name}, US\"    \r\n\r\nwhere {city-name} is a well-known city name, {state-name} is a full state name,\r\nand {state-abbrev} is a standard two-letter state abbreviation.  You can search \r\nfor other types of names, but you'll have to do you own research or experiment\r\nto find valid values.  \r\n\r\nExample:\r\n\r\n    --location-query=\"San Jose, CA\"\r\n    --location-query=\"California, US\" \r\n\r\nThe Twitter `[geo/search][twitter-geo-search]` API may fail to return expected matches if you deviate from the pattern shown above.  If values are returned from the `geo/search` method, place name matching is done without regard to spaces.\r\n\r\nIf in doubt, enable full debug logging, by passing \r\n`-l DEBUG` on the command line.\r\n\r\n## GO GIT IT ##\r\n[Twitter Streamer][twitter-streamer] on github.\r\n[streaming-apis]: https://dev.twitter.com/docs/streaming-apis\r\n[parameters-track]: https://dev.twitter.com/docs/streaming-apis/parameters#track \r\n[statuses-filter]: https://dev.twitter.com/docs/api/1.1/post/statuses/filter\r\n[twitter-api-keys]: https://dev.twitter.com/docs/faq#7447\r\n[tweepy]: https://github.com/tweepy/tweepy\r\n[twitter-tweets]: https://dev.twitter.com/docs/platform-objects/tweets\r\n[parameters-location]: https://dev.twitter.com/docs/streaming-apis/parameters#locations\r\n[twitter-place]: https://dev.twitter.com/docs/platform-objects/places\r\n[twitter-coordinates]: https://dev.twitter.com/docs/platform-objects/tweets#obj-coordinates\r\n[twitter-401-error]: https://dev.twitter.com/discussions/6778\r\n[twitter-geo-search]: https://dev.twitter.com/docs/api/1/get/geo/search\r\n[lookup-usa]: http://api.twitter.com/1/geo/id/96683cc9126741d1.json\r\n[lookup-canada]: http://api.twitter.com/1/geo/id/3376992a082d67c7.json\r\n[twitter-streamer]: https://github.com/inactivist/twitter-streamer"}